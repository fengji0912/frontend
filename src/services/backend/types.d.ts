/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/llm/extract/item/values': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Extract Item Values
     * @description Extracts the properties with their corresponding values from the given item.
     */
    get: operations['extract_item_values_llm_extract_item_values_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/llm/synthesize/items/abstracts': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Synthesize Abstracts For Question
     * @description Synthesizes a citable answer for a given research question from the abstracts of the given items.
     */
    get: operations['synthesize_abstracts_for_question_llm_synthesize_items_abstracts_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/index/add': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Index New Document
     * @description Index a new document in the vector database.
     */
    post: operations['index_new_document_index_add_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/index/add/bulk': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Bulk Index Documents
     * @description Index a list of documents in the vector database.
     */
    post: operations['bulk_index_documents_index_add_bulk_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/index/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Semantic Search
     * @description Searches for similar documents using ANN
     */
    get: operations['semantic_search_index_search_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/index/get/{document_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve Document
     * @description Get a single document from the vector store via its ID
     */
    get: operations['retrieve_document_index_get__document_id__get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/index/explore': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Explore Documents
     * @description Explore documents from the vector store using filters
     */
    get: operations['explore_documents_index_explore_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/index/recommend': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Recommend Documents
     * @description Searches for similar documents using an ANN index
     */
    get: operations['recommend_documents_index_recommend_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/index/count': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Count Documents
     * @description Count documents from the vector store using regular filters
     */
    get: operations['count_documents_index_count_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/index/info': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Indices Info
     * @description Get information about the available indices.
     */
    get: operations['get_indices_info_index_info_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** BulkIndexRequest */
    BulkIndexRequest: {
      /**
       * Documents
       * @description The documents to be indexed
       */
      documents: components['schemas']['IndexRequest'][];
    };
    /** ExtractItemValuesFromPropertiesResponse */
    ExtractItemValuesFromPropertiesResponse: {
      payload: components['schemas']['app__models__llm__ExtractItemValuesFromPropertiesResponse__Payload'];
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components['schemas']['ValidationError'][];
    };
    /** IndexRequest */
    IndexRequest: {
      /**
       * Id
       * @description The document ID, here is the coreID
       */
      id: string | number;
      /**
       * Doi
       * @description The DOI of the document
       */
      doi?: string | null;
      /**
       * Oai
       * @description The OAI of the document
       */
      oai?: string | null;
      /**
       * Title
       * @description The title of the document
       */
      title: string;
      /**
       * Date Published
       * @description The date published of the document
       */
      date_published?: string | null;
      /**
       * Abstract
       * @description The abstract of the document
       */
      abstract?: string | null;
      /**
       * Year
       * @description The year of the document
       */
      year?: string | number | null;
      /**
       * Issn
       * @description The ISSN of the document
       */
      issn?: string | null;
      /**
       * Full Text
       * @description The full text of the document
       */
      full_text?: string | null;
      /**
       * Subjects
       * @description A list of subjects of the document
       */
      subjects?: string[] | null;
      /**
       * Urls
       * @description A list of URLs of the document
       */
      urls?: string[] | null;
      /**
       * Identifiers
       * @description A list of identifiers of the document
       */
      identifiers?: string[] | null;
      /**
       * Topics
       * @description A list of topics of the document
       */
      topics?: string[] | null;
      /**
       * Download Url
       * @description The download URL of the document
       */
      download_url?: string | null;
      /**
       * Full Text Identifier
       * @description The full text identifier of the document
       */
      full_text_identifier?: string | null;
      /**
       * Pdf Hash Value
       * @description The PDF hash value of the document
       */
      pdf_hash_value?: string | null;
      /**
       * Raw Record Xml
       * @description The raw record XML of the document
       */
      raw_record_xml?: string | null;
      /**
       * Journals
       * @description A list of journals of the document
       */
      journals?: string[] | null;
      /**
       * Authors
       * @description A list of authors of the document
       */
      authors?: string[] | null;
      /**
       * Publisher
       * @description The publisher of the document
       */
      publisher?: string | null;
      /**
       * Relations
       * @description A list of relations of the document
       */
      relations?: string[] | null;
      /**
       * Contributors
       * @description A list of contributors of the document
       */
      contributors?: string[] | null;
      /**
       * Language
       * @description The language of the document
       */
      language?: string | null;
      /**
       * Citation Count
       * @description The citation count of the document
       */
      citation_count?: number | null;
      /**
       * Document Type
       * @description The inferred document type
       */
      document_type?: string | null;
    };
    /** QdrantDictResponse */
    QdrantDictResponse: {
      /**
       * Uuid
       * Format: uuid
       */
      uuid: string;
      /**
       * Timestamp
       * Format: date-time
       */
      timestamp: string;
      /**
       * Payload
       * @description The payload of the response
       */
      payload: Record<string, never>;
    };
    /** QdrantDocument */
    QdrantDocument: {
      /**
       * Id
       * @description The document ID, here is the coreID
       */
      id: string | number;
      /**
       * Doi
       * @description The DOI of the document
       */
      doi?: string | null;
      /**
       * Oai
       * @description The OAI of the document
       */
      oai?: string | null;
      /**
       * Title
       * @description The title of the document
       */
      title: string;
      /**
       * Date Published
       * @description The date published of the document
       */
      date_published?: string | null;
      /**
       * Abstract
       * @description The abstract of the document
       */
      abstract?: string | null;
      /**
       * Year
       * @description The year of the document
       */
      year?: string | number | null;
      /**
       * Issn
       * @description The ISSN of the document
       */
      issn?: string | null;
      /**
       * Full Text
       * @description The full text of the document
       */
      full_text?: string | null;
      /**
       * Subjects
       * @description A list of subjects of the document
       */
      subjects?: string[] | null;
      /**
       * Urls
       * @description A list of URLs of the document
       */
      urls?: string[] | null;
      /**
       * Identifiers
       * @description A list of identifiers of the document
       */
      identifiers?: string[] | null;
      /**
       * Topics
       * @description A list of topics of the document
       */
      topics?: string[] | null;
      /**
       * Download Url
       * @description The download URL of the document
       */
      download_url?: string | null;
      /**
       * Full Text Identifier
       * @description The full text identifier of the document
       */
      full_text_identifier?: string | null;
      /**
       * Pdf Hash Value
       * @description The PDF hash value of the document
       */
      pdf_hash_value?: string | null;
      /**
       * Raw Record Xml
       * @description The raw record XML of the document
       */
      raw_record_xml?: string | null;
      /**
       * Journals
       * @description A list of journals of the document
       */
      journals?: string[] | null;
      /**
       * Authors
       * @description A list of authors of the document
       */
      authors?: string[] | null;
      /**
       * Publisher
       * @description The publisher of the document
       */
      publisher?: string | null;
      /**
       * Relations
       * @description A list of relations of the document
       */
      relations?: string[] | null;
      /**
       * Contributors
       * @description A list of contributors of the document
       */
      contributors?: string[] | null;
      /**
       * Language
       * @description The language of the document
       */
      language?: string | null;
      /**
       * Citation Count
       * @description The citation count of the document
       */
      citation_count?: number | null;
      /**
       * Document Type
       * @description The inferred document type
       */
      document_type?: string | null;
    };
    /** QdrantListDocumentsResponse */
    QdrantListDocumentsResponse: {
      /**
       * Uuid
       * Format: uuid
       */
      uuid: string;
      /**
       * Timestamp
       * Format: date-time
       */
      timestamp: string;
      /**
       * Payload
       * @description The list of documents that match the search
       */
      payload: components['schemas']['QdrantDocument'][];
    };
    /** QdrantPageResponse */
    QdrantPageResponse: {
      /**
       * Items
       * @description The list of items retrieved from Qdrant
       */
      items: components['schemas']['QdrantDocument'][];
      /**
       * Total Hits
       * @description The total number of documents that can be retrieved from Qdrant
       */
      total_hits: number;
      /**
       * Has More
       * @description Whether there are more documents to be retrieved from Qdrant
       */
      has_more: boolean;
      /**
       * Offset
       * @description The offset to start fetching documents from, could be int, str, or UUID
       */
      offset?: number | string | null;
    };
    /** QdrantPagedDocumentsResponse */
    QdrantPagedDocumentsResponse: {
      /**
       * Uuid
       * Format: uuid
       */
      uuid: string;
      /**
       * Timestamp
       * Format: date-time
       */
      timestamp: string;
      /** @description The page of documents that match the search */
      payload: components['schemas']['QdrantPageResponse'];
    };
    /** QdrantSingleDocumentResponse */
    QdrantSingleDocumentResponse: {
      /**
       * Uuid
       * Format: uuid
       */
      uuid: string;
      /**
       * Timestamp
       * Format: date-time
       */
      timestamp: string;
      /** @description The item that matches the selection criteria */
      payload: components['schemas']['QdrantDocument'];
    };
    /** SynthesisAnswerOfQuestionFromAbstractsResponse */
    SynthesisAnswerOfQuestionFromAbstractsResponse: {
      payload: components['schemas']['app__models__llm__SynthesisAnswerOfQuestionFromAbstractsResponse__Payload'];
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /** Payload */
    app__models__llm__ExtractItemValuesFromPropertiesResponse__Payload: {
      /**
       * Item Id
       * @description The ID of the item to extract properties from
       */
      item_id: number | string;
      /**
       * Properties
       * @description The properties to extract from the item
       */
      properties: string[];
      /**
       * Values
       * @description The extracted values for the properties
       */
      values: {
        [key: string]: (string | unknown[] | number) | undefined;
      };
      /**
       * Extra
       * @description Extra values detected by the LLM
       */
      extra: {
        [key: string]: (string | unknown[] | number) | undefined;
      };
    };
    /** Payload */
    app__models__llm__SynthesisAnswerOfQuestionFromAbstractsResponse__Payload: {
      /**
       * Items Mapping
       * @description The item IDs mappings to the citations
       */
      items_mapping: {
        [key: string]: (string | number) | undefined;
      };
      /**
       * Collection Items Mapping
       * @description The collection item IDs mappings to the citations
       */
      collection_items_mapping: {
        [key: string]: (string | number) | undefined;
      };
      /**
       * Question
       * @description The question to synthesize the answer for
       */
      question: string;
      /**
       * Synthesis
       * @description The synthesized answer for the question
       */
      synthesis: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  extract_item_values_llm_extract_item_values_get: {
    parameters: {
      query: {
        /** @description The properties to extract from the item */
        properties: string[];
        /** @description The item ID to extract the values from */
        item_id?: string | number | null;
        /** @description The custom collection item ID to extract the values from */
        collection_item_id?: string | null;
        /** @description Whether to invalidate the cache for the item */
        invalidate_cache?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ExtractItemValuesFromPropertiesResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  synthesize_abstracts_for_question_llm_synthesize_items_abstracts_get: {
    parameters: {
      query: {
        /** @description The question to synthesize the abstracts for */
        question: string;
        /** @description The item ID to extract the values from */
        item_ids?: (string | number)[];
        /** @description The custom collection item ID to extract the values from */
        custom_item_ids?: (string | number)[];
        /** @description Whether to invalidate the cache for the item */
        invalidate_cache?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SynthesisAnswerOfQuestionFromAbstractsResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  index_new_document_index_add_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['IndexRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QdrantDictResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  bulk_index_documents_index_add_bulk_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['BulkIndexRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  semantic_search_index_search_get: {
    parameters: {
      query: {
        /** @description The text to search for */
        query: string;
        /** @description The maximum number of documents to return */
        limit?: number;
        /** @description The offset to start fetching documents from */
        offset?: number | null;
        /** @description The criteria to filter the search results */
        filter?: string | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QdrantPagedDocumentsResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  retrieve_document_index_get__document_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        document_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QdrantSingleDocumentResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  explore_documents_index_explore_get: {
    parameters: {
      query: {
        /** @description The criteria to filter the search results */
        filter: string;
        /** @description The maximum number of documents to return */
        limit?: number;
        /** @description The offset to start fetching documents from */
        offset?: string | null;
        /** @description The payload field to order by */
        order_by?: string | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QdrantPagedDocumentsResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  recommend_documents_index_recommend_get: {
    parameters: {
      query: {
        /** @description The document IDs to be used for recommendations */
        document_ids: string[];
        /** @description The document IDs to be avoided for recommendations */
        avoid_ids?: string[] | null;
        /** @description The maximum number of documents to return */
        limit?: number;
        /** @description The offset to start fetching documents from */
        offset?: number | null;
        /** @description The criteria to filter the search results */
        filter?: string | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QdrantListDocumentsResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  count_documents_index_count_get: {
    parameters: {
      query?: {
        /** @description The criteria to filter the search results */
        filter?: string | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QdrantDictResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_indices_info_index_info_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QdrantDictResponse'];
        };
      };
    };
  };
}
